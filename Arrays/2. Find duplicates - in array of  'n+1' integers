Method 1 - Using Frequency array

 int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        vector<int>ans(n,0);
        int num;
        for(int i=0;i<n;i++)
        {
            ans[nums[i]]++;
        }
        for(int i=0;i<n;i++)
        {
            if(ans[i] > 1)
                num=i;
        }
        return num;
    }
    
    Time Complexity : O(n) + O(n)
    Space Complexity : O(n)
    
    
    
    
    Method 2 - Using Tortoise i.e slow and fast pointer
    
     int findDuplicate(vector<int>& nums) {
        int slow,fast;
        slow = nums[0];
        fast = nums[0];
        
        do
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        while(slow!=fast);
        fast = nums[0];
        
        while(slow!=fast)
        {
            slow= nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
